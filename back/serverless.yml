service: three-drive
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    USERS_TABLE_NAME:
      Ref: usersTable
    RESOURCES_TABLE_NAME:
      Ref: resourcesTable
    DIRECTORIES_TABLE_NAME:
      Ref: directoriesTable
    RESOURCES_BUCKET_NAME:
      Ref: resourcesThreeCloud
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ usersTable, Arn ]
        - "Fn::GetAtt": [ resourcesTable, Arn ]
        - "Fn::GetAtt": [ directoriesTable, Arn ]

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::resources-three-cloud"
        - "arn:aws:s3:::resources-three-cloud/*"

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:eu-central-1:*:function:three-drive-dev-authorizer"

package:
  individually: true
  patterns:
    - '!**/**'
    - 'utility/**'
    - 'venv/**'

functions:
  authorizer:
    handler: authorization/authorization.authorize
    package:
      patterns:
        - 'authorization/**'

  login:
    handler: login/login.login
    package:
      patterns:
        - 'login/**'
    events:
      - http:
          path: login
          method: post
          cors: true

  registration:
    handler: registration/registration.registration
    package:
      patterns:
        - 'registration/**'
    events:
      - http:
          path: registration
          method: post
          cors: true

  uploadResource:
    handler: uploadResource/uploadResource.upload
    package:
      patterns:
        - 'uploadResource/**'
    events:
      - http:
          path: upload
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 30
            type: token

  createDirectory:
    handler: createDirectory/createDirectory.create
    package:
      patterns:
        - 'createDirectory/**'
    events:
      - http:
          path: directory
          method: post
          cors: true
  getMyResources:
    handler: getMyResources/getMyResources.getMyResources
    package:
      include:
        - 'getMyResources/**'
    events:
      - http:
          path: getMyResources
          method: get
          cors: true


resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    directoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Directory
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    resourcesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Resources
        AttributeDefinitions:
          - AttributeName: path
            AttributeType: S
        KeySchema:
          - AttributeName: path
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    resourcesThreeCloud:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: resources-three-cloud



plugins:
  - serverless-python-requirements


custom:
  pythonRequirements:
    filename: requirements.txt